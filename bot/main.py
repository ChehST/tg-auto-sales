import os
import logging
import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler
from dotenv import load_dotenv


# Load environment variables from .env file
load_dotenv()


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = []
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(chat_id=update.effective_chat.id,
                                 photo=open('media/team.png', 'rb'),
                                 caption="üëã –ü—Ä–∏–≤–µ—Ç, " + update.effective_chat.first_name + "!" + \
                                         "–≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ê–≤—Ç–æ–ù–∞—Ö–æ–¥–∫–∞.\n\n"

                                         "üöó –ú—ã –ø–æ–º–æ–≥–∞–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –ö–∏—Ç–∞—è, \
                                            –ö–æ—Ä–µ–∏ –∏ –Ø–ø–æ–Ω–∏–∏, —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 2 000 000 ‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∑–∞ 15-45 –¥–Ω–µ–π!\n\n" + \

                                         "–î–∞–ª–µ–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º, –ø–æ—á–µ–º—É –∞–≤—Ç–æ –∏–∑ –ê–∑–∏–∏ –≤ –ª—É—á—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, \
                                            –∞ –∏—Ö –ø–æ–∫—É–ø–∫–∞ - –≤—ã–≥–æ–¥–Ω–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞.\n\n"

                                         "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É –æ—Ç –±–æ—Ç–∞, \
                                            –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –Ω–∞–∂–∏–º–∞—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.\n\n" + \

                                         "–í–∞–∂–Ω–æ‚ùó\n" + \
                                         "–í—ã–±–æ—Ä –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\
                                            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ \
                                            –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.\n\n" + \

                                         "‚ùå –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∑–¥–µ—Å—å –Ω–µ –≤–µ–¥—É—Ç—Å—è –¥–∏–∞–ª–æ–≥–∏. \
                                            –ß—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –∏ –∫ –∫–∞–∫–æ–º—É \
                                            —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞.\n\n" + \

                                         "–ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                 reply_markup=reply_markup )

    time.sleep(3)

    await context.bot.sendVideoNote(chat_id=update.effective_chat.id,
                                video_note=open('media/video1.mp4', 'rb'),
                                reply_markup=reply_markup)

async def command_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    button = [[KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç",request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(button)

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–¢–∏–ø–∞ –¥–∏–∞–ª–æ–≥ 1/2")
    time.sleep(3)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–¢–∏–ø–∞ –¥–∏–∞–ª–æ–≥ 2/2")
    time.sleep(3)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–ó–∞—è–≤–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                   reply_markup=reply_markup)

async def command_avaliable(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = []
    keyboard.append([InlineKeyboardButton("–ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="link_to_your_channel")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(chat_id=update.effective_chat.id,
                                 photo=open('media/image2.jpg', 'rb'),
                                 caption="–ù–∞—à Telegram-–∫–∞–Ω–∞–ª —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏, —É–∂–µ \
                                      –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∏ –≥–æ—Ç–æ–≤—ã–º–∏ –∫ –ø–æ–∫—É–ø–∫–µ!\n\n" + \

                                    "‚ùóÔ∏è–í—Å–µ –∞–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–§ - –¥–æ 30 –¥–Ω–µ–π.\n"+\
                                    "üî• –≠–∫–æ–Ω–æ–º—å—Ç–µ –¥–æ 2 000 000 ‚ÇΩ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏!\n\n" + \

                                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n" + \
                                    "üëâ https://linktoyourchanel\n\n" + \

                                    "–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:\n" +\
                                    "‚ñ™Ô∏è –ù–æ–≤—ã–µ –∞–≤—Ç–æ –∏–∑ –ö–∏—Ç–∞—è –ø–æ —Ü–µ–Ω–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n" + \
                                    "‚ñ™Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ –∏–∑ –ö–∏—Ç–∞—è –∏ –ö–æ—Ä–µ–∏ —Å –ø–æ–ª–Ω—ã–º –æ—Å–º–æ—Ç—Ä–æ–º\n\n" + \


                                    "–ó–∞ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –º—ã –æ—Ç–≤–µ—á–∞–µ–º –ª–∏—á–Ω–æ!\n\n" + \

                                    "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ –≤–∏–¥–µ—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!\n\n" + \

                                    'üëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏"',
                                 reply_markup=reply_markup
    )

async def render_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = []
    keyboard.append([InlineKeyboardButton("–†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ", callback_data="request")])
    keyboard.append([InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data="selection")])
    keyboard.append([InlineKeyboardButton("–ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="avaliable")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Issue - if user have restriction to recieve video and audio notes
    # then it will not be sent and next send_message too. Need to catch
    # the exceptions.
    # await context.bot.sendVideoNote(chat_id=update.effective_chat.id,
    #                             video_note=open('media/video2.mp4', 'rb')
    #                             )

    time.sleep(1)

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                    text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–∞–ª—å—à–µ?\n\n" + \

                                        "üí∞–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:\n" + \
                                        "–†–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —Ç–∞–º–æ–∂–Ω–µ–π –ø–æ–¥ –∫–ª—é—á" + \
                                        "- –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ.\n\n" + \

                                        "üìù –ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n" + \
                                        "–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n" +\

                                        "üöó –ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏: –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, \
                                          –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–§ - –¥–æ 30 –¥–Ω–µ–π.\n\n" + \

                                        "–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                    reply_markup=reply_markup
                                    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles callback queries from inline keyboard buttons.

    Args:
        update (Update): Incoming update.
        context (ContextTypes.DEFAULT_TYPE): Context for the callback.

    This function checks the data of the callback query and sends a message
    with an invite link if the data matches 'invite_link'.
    """
    
    query = update.callback_query
    await query.answer()
    if query.data == 'menu':
        await render_menu(update, context)
    if query.data == 'request':
        pass
    if query.data == 'selection':
        pass
    if query.data == 'avaliable':
        await command_avaliable(update, context)
    if query.data == 'link_to_your_channel':
        pass
    

if __name__ == '__main__':
    application = ApplicationBuilder().token(os.getenv('TOKEN_BOT')).build()
    
    start_handler = CommandHandler('start', command_start)
    avaliable_handler = CommandHandler('avaliable', command_avaliable)
    request_handler = CommandHandler('request', command_request)
    application.add_handler(start_handler)
    application.add_handler(avaliable_handler)
    application.add_handler(request_handler)
    application.add_handler(CallbackQueryHandler(button_callback))
    application.run_polling()
