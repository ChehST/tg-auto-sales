import os
import logging
import time

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    filters,
    MessageHandler,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv
import csv

from commands import *


# Load environment variables from .env file
load_dotenv()


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data['lead_category'] = query.data
    # Set user awaiting instance
    context.user_data['state'] = 'awaiting_car_model'
    await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="[1/3] –ö–∞–∫–∏–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?\n\n" + \
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ üëá"
        )



async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    button = [[KeyboardButton("‚úÖ–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç",request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(button,resize_keyboard=True)

    if state == 'awaiting_car_model':
        car_model = update.message.text
        context.user_data['car_model'] = car_model
        context.user_data['state'] = 'awaiting_car_budget'  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="[2/3] –ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?\n\n" + \
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤ —Ä—É–±–ª—è—Ö.\n\n" + \
                "‚ö†Ô∏è –ù–µ –ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∑–Ω–∞–∫–∏ –≤–∞–ª—é—Ç, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.\n" + \
                "(–ø—Ä–∏–º–µ—Ä—ã: 2000000, 3500000, 4300000)"
        )

    elif state == 'awaiting_car_budget':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞

        car_budget = update.message.text
        context.user_data['car_budget'] = car_budget
        context.user_data['state'] = 'awaiting_phone_number'  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üòä –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n\n" + \
                    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç",' + \
                    ' –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.\n\n' + \
                    "–•–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–∏?\n"
                    "üëâ –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º:",
                    reply_markup=reply_markup
        )

async def contact_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'awaiting_phone_number':
        contact = update.message.contact
        if contact:
            phone_number = contact.phone_number
            context.user_data['phone'] = phone_number

            # Send final message with all collected information
            car_model = context.user_data.get('car_model')
            car_budget = context.user_data.get('car_budget')
            lead_category = context.user_data.get('lead_category')

            # Save data to CSV file that will be used later
            # by sellers
            with open('contacts.csv', mode='a', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow([lead_category, car_model, car_budget, phone_number])

            # Debug output, it might be good to create ticket to add
            # flag DEBUG_MODE to print this info into log file instead of console
            # or just remove it after testing phase
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ö–ª–∏–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {lead_category}.–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ {car_model} –Ω–∞ –±—é–¥–∂–µ—Ç {car_budget}. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"
            )

            context.user_data['state'] = None

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles callback queries from inline keyboard buttons.

    Args:
        update (Update): Incoming update.
        context (ContextTypes.DEFAULT_TYPE): Context for the callback.

    This function checks the data of the callback query and sends a message
    with an invite link if the data matches 'invite_link'.
    """
    
    plate_keyboard = []
    plate_keyboard.append([InlineKeyboardButton("–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", callback_data="qa")])
    plate_keyboard.append([InlineKeyboardButton("–†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ", callback_data="request")])
    reply_plate_markup = InlineKeyboardMarkup(plate_keyboard)

    query = update.callback_query
    await query.answer()
    if query.data == 'menu':
        await render_menu(update, context)
    if query.data == 'request':
        await command_request(update, context)
    if query.data == "qa":
        await command_qa(update, context)
    if query.data == 'selection':
        pass
    if query.data == 'avaliable':
        await command_avaliable(update, context)
    if query.data == 'link_to_your_channel':
        pass
    if query.data in ['request_hot_lead', 'request_warm_lead']:
        await handle_order(update, context)
    if query.data == "faq_1":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Å–¥–µ–ª–∫–∏.\n\n" + \
                                            "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω–µ—Ç–µ—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø–æ–∫—É–ø–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\
                                                –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å –µ–µ.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_2":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π,\n\n" + \
                                            "—á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_3":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∏—Å–∫–æ–≤–∞–Ω–∞.\n\n" + \
                                            "–ü–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏, —á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_4":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –±–µ—Ä—ë–º –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\n\n" + \
                                            "–≤–∫–ª—é—á–∞—è –µ–≥–æ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_5":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π,\n\n" + \
                                            "–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_6":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã —Å—Ç—Ä–∞—Ö—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏,\n\n" + \
                                            "—á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–≥–æ –Ω–µ—Å—á–∞—Å—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è.",
                                       reply_markup=reply_plate_markup)
    

if __name__ == '__main__':
    application = ApplicationBuilder().token(os.getenv('TOKEN_BOT')).build()
    
    start_handler = CommandHandler('start', command_start)
    avaliable_handler = CommandHandler('avaliable', command_avaliable)
    request_handler = CommandHandler('request', command_request)
    qa_handler = CommandHandler('qa', command_qa)
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler)
    contact_handler = MessageHandler(filters.CONTACT, contact_input_handler)
    application.add_handler(contact_handler)
    application.add_handler(text_handler)
    application.add_handler(start_handler)
    application.add_handler(qa_handler)
    application.add_handler(avaliable_handler)
    application.add_handler(request_handler)
    application.add_handler(CallbackQueryHandler(button_callback))
    application.run_polling()