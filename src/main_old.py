import os
import logging
import time

from telegram import (InlineKeyboardButton,
                      InlineKeyboardMarkup,
                      KeyboardButton,
                      ReplyKeyboardMarkup,
                      Update)

from telegram.ext import (
    filters,
    MessageHandler,
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv
import csv


# Load environment variables from .env file
load_dotenv()


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def command_start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = []
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(chat_id=update.effective_chat.id,
                                 photo=open('media/team.png', 'rb'),
                                 caption="üëã –ü—Ä–∏–≤–µ—Ç, " + update.effective_chat.first_name + "!" + \
                                         "–≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ê–≤—Ç–æ–ù–∞—Ö–æ–¥–∫–∞.\n\n"

                                         "üöó –ú—ã –ø–æ–º–æ–≥–∞–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ –ö–∏—Ç–∞—è, \
                                            –ö–æ—Ä–µ–∏ –∏ –Ø–ø–æ–Ω–∏–∏, —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 2 000 000 ‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∑–∞ 15-45 –¥–Ω–µ–π!\n\n" + \

                                         "–î–∞–ª–µ–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º, –ø–æ—á–µ–º—É –∞–≤—Ç–æ –∏–∑ –ê–∑–∏–∏ –≤ –ª—É—á—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, \
                                            –∞ –∏—Ö –ø–æ–∫—É–ø–∫–∞ - –≤—ã–≥–æ–¥–Ω–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞.\n\n"

                                         "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É –æ—Ç –±–æ—Ç–∞, \
                                            –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –Ω–∞–∂–∏–º–∞—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏.\n\n" + \

                                         "–í–∞–∂–Ω–æ‚ùó\n" + \
                                         "–í—ã–±–æ—Ä –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.\
                                            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ \
                                            –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.\n\n" + \

                                         "‚ùå –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∑–¥–µ—Å—å –Ω–µ –≤–µ–¥—É—Ç—Å—è –¥–∏–∞–ª–æ–≥–∏. \
                                            –ß—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –∏ –∫ –∫–∞–∫–æ–º—É \
                                            —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤–∞—Å –Ω–∞–ø—Ä–∞–≤–∏—Ç—å, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞.\n\n" + \

                                         "–ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                 reply_markup=reply_markup )

    time.sleep(3)

    try:
        await context.bot.sendVideoNote(chat_id=update.effective_chat.id,
                                video_note=open('media/video3.mp4', 'rb'),
                                reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"Error sending video note: {e}")

async def command_request(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = [
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ", callback_data="request_hot_lead")],
        [InlineKeyboardButton("–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å", callback_data="request_warm_lead")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–°–µ–π—á–∞—Å –Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –æ—â—É—â–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–π —Å–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.\n\n" + \
                                        "‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –ø–æ–∫—É–ø–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π? –ù–∞–ø—Ä–∞–≤–∏–º –≤–∞—Å —Å—Ä–∞–∑—É\
                                        –∫ —ç–∫—Å–ø–µ—Ä—Ç—É –ø–æ –∏–º–ø–æ—Ä—Ç—É, —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n\n" + \
                                        "üëÄ –ï—â—ë –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ—Å—å? –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ \
                                              —Ç–µ—á–µ–Ω–∏–µ 2-3 –¥–Ω–µ–π, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –≤—Å—ë –æ–±–¥—É–º–∞—Ç—å.\n\n" + \
                                        "‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É, –Ω–∞–ø—Ä–∞–≤–∏—Ç—å\
                                            –∑–∞–ø—Ä–æ—Å –≤ –Ω—É–∂–Ω—ã–π –æ—Ç–¥–µ–ª –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞–º –±—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á—ë—Ç –∏ –ª—É—á—à–µ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.\n\n" + \
                                        "üó®Ô∏è –í—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–∫—É–ø–∫–µ –∏–ª–∏ –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ—Å—å?\n\n" + \
                                        "–ñ–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                   reply_markup=reply_markup)

async def command_avaliable(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = []
    keyboard.append([InlineKeyboardButton("–ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="link_to_your_channel")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_photo(chat_id=update.effective_chat.id,
                                 photo=open('media/image2.jpg', 'rb'),
                                 caption="–ù–∞—à Telegram-–∫–∞–Ω–∞–ª —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏, —É–∂–µ \
                                      –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∏ –≥–æ—Ç–æ–≤—ã–º–∏ –∫ –ø–æ–∫—É–ø–∫–µ!\n\n" + \

                                    "‚ùóÔ∏è–í—Å–µ –∞–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–§ - –¥–æ 30 –¥–Ω–µ–π.\n"+\
                                    "üî• –≠–∫–æ–Ω–æ–º—å—Ç–µ –¥–æ 2 000 000 ‚ÇΩ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏!\n\n" + \

                                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n" + \
                                    "üëâ https://linktoyourchanel\n\n" + \

                                    "–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:\n" +\
                                    "‚ñ™Ô∏è –ù–æ–≤—ã–µ –∞–≤—Ç–æ –∏–∑ –ö–∏—Ç–∞—è –ø–æ —Ü–µ–Ω–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è\n" + \
                                    "‚ñ™Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ –∏–∑ –ö–∏—Ç–∞—è –∏ –ö–æ—Ä–µ–∏ —Å –ø–æ–ª–Ω—ã–º –æ—Å–º–æ—Ç—Ä–æ–º\n\n" + \


                                    "–ó–∞ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –º—ã –æ—Ç–≤–µ—á–∞–µ–º –ª–∏—á–Ω–æ!\n\n" + \

                                    "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–º–∏ –≤–∏–¥–µ—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!\n\n" + \

                                    'üëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏"',
                                 reply_markup=reply_markup
    )

async def command_qa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    keyboard.append([InlineKeyboardButton("1Ô∏è‚É£", callback_data="faq_1"),
                     InlineKeyboardButton("2Ô∏è‚É£", callback_data="faq_2"),
                     InlineKeyboardButton("3Ô∏è‚É£", callback_data="faq_3")])
    keyboard.append([InlineKeyboardButton("4Ô∏è‚É£", callback_data="faq_4"),
                     InlineKeyboardButton("5Ô∏è‚É£", callback_data="faq_5"),
                     InlineKeyboardButton("6Ô∏è‚É£", callback_data="faq_6")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–û—Ç–ª–∏—á–Ω–æ!\n\n" + \
                                        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ –ò–ª—å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n" + \
                                        "1Ô∏è‚É£ –ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?\n" + \
                                        "2Ô∏è‚É£ –ö–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –º–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω—É—Ç?\n" + \
                                        "3Ô∏è‚É£ –ö–∞–∫–∏–µ –µ—Å—Ç—å —Ä–∏—Å–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞?\n" + \
                                        "4Ô∏è‚É£ –ò–∑ —á–µ–≥–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –∏–∑ –ö–æ—Ä–µ–∏, –ö–∏—Ç–∞—è –∏ –Ø–ø–æ–Ω–∏–∏?\n" + \
                                        "5Ô∏è‚É£ –ö—Ç–æ –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –µ—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –†–æ—Å—Å–∏–∏?\n" + \
                                        "6Ô∏è‚É£ –°—Ç—Ä–∞—Ö—É–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏?\n\n" + \
                                        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–∏—Ñ—Ä—É üëá",
                                   reply_markup=reply_markup)
async def render_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = []
    keyboard.append([InlineKeyboardButton("–†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ", callback_data="request")])
    keyboard.append([InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", callback_data="selection")])
    keyboard.append([InlineKeyboardButton("–ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="avaliable")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Issue - if user have restriction to recieve video and audio notes
    # then it will not be sent and next send_message too. Need to catch
    # the exceptions.
    try:
        await context.bot.sendVideoNote(chat_id=update.effective_chat.id,
                                video_note=open('media/video4.mp4', 'rb')
                                )
    except Exception as e:
        logging.error(f"Error sending video note: {e}")

    time.sleep(1)

    await context.bot.send_message(chat_id=update.effective_chat.id,
                                    text="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–∞–ª—å—à–µ?\n\n" + \
                                        "üí∞–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ:\n" + \
                                        "–†–∞—Å—Å—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ —Ç–∞–º–æ–∂–Ω–µ–π –ø–æ–¥ –∫–ª—é—á" + \
                                        "- –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ.\n\n" + \
                                        "üìù –ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n" + \
                                        "–ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–±–æ—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n" +\
                                        "üöó –ê–≤—Ç–æ –≤ –Ω–∞–ª–∏—á–∏–∏: –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, \
                                          –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–§ - –¥–æ 30 –¥–Ω–µ–π.\n\n" + \
                                        "–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                                    reply_markup=reply_markup
                                    )

async def handle_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    context.user_data['lead_category'] = query.data
    # Set user awaiting instance
    context.user_data['state'] = 'awaiting_car_model'
    await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="[1/3] –ö–∞–∫–∏–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?\n\n" + \
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ üëá"
        )



async def text_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    button = [[KeyboardButton("‚úÖ–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç",request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(button,resize_keyboard=True)

    if state == 'awaiting_car_model':
        car_model = update.message.text
        context.user_data['car_model'] = car_model
        context.user_data['state'] = 'awaiting_car_budget'  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="[2/3] –ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?\n\n" + \
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤ —Ä—É–±–ª—è—Ö.\n\n" + \
                "‚ö†Ô∏è –ù–µ –ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –∑–Ω–∞–∫–∏ –≤–∞–ª—é—Ç, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.\n" + \
                "(–ø—Ä–∏–º–µ—Ä—ã: 2000000, 3500000, 4300000)"
        )

    elif state == 'awaiting_car_budget':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞

        car_budget = update.message.text
        context.user_data['car_budget'] = car_budget
        context.user_data['state'] = 'awaiting_phone_number'  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üòä –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!\n\n" + \
                    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç",' + \
                    ' –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º.\n\n' + \
                    "–•–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–∏?\n"
                    "üëâ –°–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º:",
                    reply_markup=reply_markup
        )

async def contact_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'awaiting_phone_number':
        contact = update.message.contact
        if contact:
            phone_number = contact.phone_number
            context.user_data['phone'] = phone_number

            # Send final message with all collected information
            car_model = context.user_data.get('car_model')
            car_budget = context.user_data.get('car_budget')
            lead_category = context.user_data.get('lead_category')

            # Save data to CSV file that will be used later
            # by sellers
            with open('contacts.csv', mode='a', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow([lead_category, car_model, car_budget, phone_number])

            # Debug output, it might be good to create ticket to add
            # flag DEBUG_MODE to print this info into log file instead of console
            # or just remove it after testing phase
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–ö–ª–∏–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {lead_category}.–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ {car_model} –Ω–∞ –±—é–¥–∂–µ—Ç {car_budget}. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"
            )

            context.user_data['state'] = None

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles callback queries from inline keyboard buttons.

    Args:
        update (Update): Incoming update.
        context (ContextTypes.DEFAULT_TYPE): Context for the callback.

    This function checks the data of the callback query and sends a message
    with an invite link if the data matches 'invite_link'.
    """
    
    plate_keyboard = []
    plate_keyboard.append([InlineKeyboardButton("–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", callback_data="qa")])
    plate_keyboard.append([InlineKeyboardButton("–†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ", callback_data="request")])
    reply_plate_markup = InlineKeyboardMarkup(plate_keyboard)

    query = update.callback_query
    await query.answer()
    if query.data == 'menu':
        await render_menu(update, context)
    if query.data == 'request':
        await command_request(update, context)
    if query.data == "qa":
        await command_qa(update, context)
    if query.data == 'selection':
        pass
    if query.data == 'avaliable':
        await command_avaliable(update, context)
    if query.data == 'link_to_your_channel':
        pass
    if query.data in ['request_hot_lead', 'request_warm_lead']:
        await handle_order(update, context)
    if query.data == "faq_1":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Å–¥–µ–ª–∫–∏.\n\n" + \
                                            "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω–µ—Ç–µ—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ø–æ–∫—É–ø–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\
                                                –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å –µ–µ.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_2":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π,\n\n" + \
                                            "—á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_3":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –ø–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑-–∑–∞ —Ä—É–±–µ–∂–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∏—Å–∫–æ–≤–∞–Ω–∞.\n\n" + \
                                            "–ü–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏, —á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_4":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã –±–µ—Ä—ë–º –≤–æ –≤–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\n\n" + \
                                            "–≤–∫–ª—é—á–∞—è –µ–≥–æ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ –¥—Ä—É–≥–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_5":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –ø–æ –∏–º–ø–æ—Ä—Ç—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π,\n\n" + \
                                            "–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω.",
                                       reply_markup=reply_plate_markup)
    if query.data == "faq_6":
        await context.bot.send_message(chat_id=query.message.chat_id,
                                       text="–ú—ã —Å—Ç—Ä–∞—Ö—É–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏,\n\n" + \
                                            "—á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–≥–æ –Ω–µ—Å—á–∞—Å—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è.",
                                       reply_markup=reply_plate_markup)
    

if __name__ == '__main__':
    
    application = ApplicationBuilder().token(os.getenv('TOKEN_BOT')).build()
    
    start_handler = CommandHandler('start', command_start)
    avaliable_handler = CommandHandler('avaliable', command_avaliable)
    request_handler = CommandHandler('request', command_request)
    qa_handler = CommandHandler('qa', command_qa)
    text_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, text_input_handler)
    contact_handler = MessageHandler(filters.CONTACT, contact_input_handler)
    application.add_handler(contact_handler)
    application.add_handler(text_handler)
    application.add_handler(start_handler)
    application.add_handler(qa_handler)
    application.add_handler(avaliable_handler)
    application.add_handler(request_handler)
    application.add_handler(CallbackQueryHandler(button_callback))
    application.run_polling()